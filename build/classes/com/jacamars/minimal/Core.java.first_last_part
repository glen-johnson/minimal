package com.jacamars.minimal;


import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.IOException;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.security.auth.login.Configuration;
import javax.servlet.http.HttpSession;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.jacamars.minimal.response.DomainQuery;
import com.jacamars.minimal.response.Query;
import com.jacamars.minimal.response.RegularQuery;

import redis.clients.jedis.Jedis;

public enum Core {

	INSTANCE;

	public String hello = "Hello Glen";
	public Jedis jedis;
	static String SOLR = null;

	public static Core getInstance() {
		if (SOLR == null) {
			SOLR = "http://" + Zippy.config.search.host + ":" + Zippy.config.search.port +"/solr/";
		}
		return INSTANCE;
	}

	public void connectJedis() throws Exception {
		jedis = new Jedis("localhost", 6379);
		jedis.connect();
		jedis.select(1);
	}
	
	public String [] doQuery(String query, Boolean isDomain, String locale, Boolean isLocale) throws Exception {
		long time = System.currentTimeMillis();
		HttpPostGet http = new HttpPostGet();
		String endPoint =  null;
		String ar[] = new String[3];

		if(isLocale) {
			String numBusinesses = getNumBusinesses(locale);
			String radius = getRadius(numBusinesses);
			ar[0] = numBusinesses;
			ar[1] = null;
			ar[2] = radius;
	                System.out.println("CORE RADIUS: " + radius);
			return ar;
		}

	        //System.out.println("BEFORE TRIM: " + query);
		String key = query.trim();
                key = key.replaceFirst("^#", ""); // hashtag
                key = key.replaceAll("[^\\x20-\\x7e]", "");
		key = key.replaceAll("%26", "and");
		key = key.replaceAll("&", "and");
                key = java.net.URLDecoder.decode(key, "UTF-8"); 
		key = key.replaceAll("[\\+\\s]+", " ");
	        //System.out.println("KEY: " + key);

		int nbytes = 0;
		byte bytes [] = null;

			

		//String html = getCache(key);
		//if (html != null) {
		//	time = System.currentTimeMillis() - time;
	        //	System.out.println("---->Cached return in " + time + " ms.");
		//	return html;
		//}


		boolean regularQuery  = true;
                String requestHandler = "multiple";
                if(isLocale || isDomain || ! key.contains(" ")) {
	                requestHandler = "single";
	                if(isDomain == true) {
	                        requestHandler = "domain";
				regularQuery = false;
			}
		}
		if(requestHandler.contains("mult")) {
		        key = key.replaceAll("\"", "");
			key = query_mods(key);
                        //key =  java.net.URLEncoder.encode(key, "UTF-8"); 
		        //key = key.replaceAll("\\+", "%20");
		        //key = key.replaceAll(" ", "+");
		        key = key.replaceAll(" ", "%20");

			//String[] words = key.split("\\+");
			//int num_words = words.length;
			// dismax and edismax are for multiple fields
			//int proximity = 2 * num_words * num_words;
			//if(proximity < 30) {
			//   key = "\"" + key + "\"" + "~" + proximity;
			//}


		}
		else if(requestHandler.contains("single")) {
			key = query_mods(key);
                        key =  java.net.URLEncoder.encode(key, "UTF-8"); 
		}
                if(locale != null && isDomain == false) {
		   String latlong = getLatLong(locale);
		   String numBusinesses = getNumBusinesses(locale);
	    	   String radius = getRadius(numBusinesses);
		   if (latlong == null) {
		      locale = locale.replaceAll(" ", "+");
		      key = key + "+AND+locale%3A" + locale;
		   }
		   else {
		      if(radius == null) {
		         key = key + "&spatial=true&fq={!geofilt}&sfield=geoloc&pt=" + latlong + "&d=50&sort=geodist()%20asc";
		      }
		      else {
			 int r = (int)(1.6 * Integer.parseInt(radius));
		         key = key + "&spatial=true&fq={!geofilt}&sfield=geoloc&pt=" + latlong + "&d="+r+"&sort=geodist()%20asc";
		      }
		   }
		}

		// key = key + "&group=true&group.field=company&group.main=true";
		endPoint = SOLR + "collection1/" + requestHandler + "?q=" + key + "&wt=json";
	        System.out.println("EP: " + endPoint);

		String contents = http.sendGet(endPoint,15000,15000);
		String head = contents;
	        // System.out.println("CONTENTS: " + contents);
		if(contents.length() > 400) {
		   head = contents.substring(0, 400);
		}
	        System.out.println("CONTENTS: " + head);

		String numResults = "0";
		String pattern = "\"numFound\":(\\d+)";
		Pattern r = Pattern.compile(pattern);
		Matcher m = r.matcher(head);
		if (m.find( )) {
			numResults = m.group(1);
		}
	        System.out.println("NUMR: " + numResults);
		ar[0] = numResults;
		if(numResults == "0" || isLocale) {
		   ar[1] = null;
		   return ar;
		}

		ObjectMapper mapper = new ObjectMapper();

		if (regularQuery) {
			RegularQuery solr = mapper.readValue(contents, RegularQuery.class);
			contents = solr.toHtml(query);
		        putCache(key,contents);
		} else {
			DomainQuery solr = mapper.readValue(contents, DomainQuery.class);
			contents = solr.toHtml();
		}
		ar[1] = contents;
		return ar;
	}

	public String query_mods(String phrase) {

	        System.out.println("query_mods: " + phrase);

		if(phrase.length() < 4) {
			return(phrase);
		}
		if(! phrase.contains(" ")) {
			return(phrase);
		}

		String pattern = "s$";
		Pattern r = Pattern.compile(pattern);
		Matcher m = r.matcher(phrase);
		Boolean plural_flag = false;
		if (m.find( )) {
	        	System.out.println("SINGULAR: " + phrase);
			plural_flag = true;
		}

		String query       = phrase;
		String orig_phrase = phrase;
		String first_part  = null;
		String last_part  = null;

		// the anchor query is optional, if hit, it gets a boost
		String anchor_part = null;

		String mod = null;
		String[] words = phrase.split(" ");
		int num_words = words.length;
		query = words[num_words - 1];
		last_part = query;

		// 2-3 words: all required
		// 4+ words: first, second-last and last required
		// This assumes the first word is most important and second last is most important adjective
		// The last word which is the final noun is not included 


		first_part = "(+" + words[0] + ")"; // always required
		if(num_words > 2) {
			if(num_words == 3) {
				first_part = first_part + "(+" + words[1] + ")";
			}
			else {
				for(int i=1;i<num_words - 2;i++) {
				   first_part = first_part + " " + words[i];
				}
				first_part = first_part + "(+" + words[num_words - 2] + ")";
			}	
		}

	        System.out.println("FIRST PART: " + first_part);
	        System.out.println("LAST_PART: " + last_part);

		if(plural_flag == false) {
			first_part = first_part + " +" + last_part;
			last_part = null;
			query = null;
			mod = null;
			String modified_query = get_mod_query(first_part, last_part, query, mod);
	        	System.out.println("SINGULAR: " + modified_query);
			return(modified_query);
		}
		else {	

			// the rules used below were found here:
			// http://www.oxforddictionaries.com/words/plurals-of-nouns
	
			int length = query.length();
	
			if(query.length() > 5) {
				pattern = "[^aeiou]ies$";
				r = Pattern.compile(pattern);
				m = r.matcher(query);
				if (m.find( )) {
					mod = query.replaceAll("ies$", "y");
			        	System.out.println("IES: " + mod);
					String modified_query = get_mod_query(first_part, last_part, query, mod);
					return(modified_query);
				}
		
				pattern = "(?:ch|s|sh|x|z)es$";
				r = Pattern.compile(pattern);
				m = r.matcher(query);
				if (m.find( )) {
		   			mod = query.replaceAll("es$", "");
			        	System.out.println("ES: " + mod);
					String modified_query = get_mod_query(first_part, last_part, query, mod);
					return(modified_query);
		 		   }
		
				pattern = "ves$";
				r = Pattern.compile(pattern);
				m = r.matcher(query);
				if (m.find( )) {
					mod = query.replaceAll("ves$", "f");
			        	System.out.println("VES: " + mod);
					String modified_query = get_mod_query(first_part, last_part, query, mod);
					return(modified_query);
				}
		
				pattern = "os$";
				r = Pattern.compile(pattern);
				m = r.matcher(query);
				if (m.find( )) {
					mod = query.replaceAll("s$", "");
			        	System.out.println("OS: " + mod);
					String modified_query = get_mod_query(first_part, last_part, query, mod);
					return(modified_query);
				}
		
				pattern = "oes$";
				r = Pattern.compile(pattern);
				m = r.matcher(query);
				if (m.find( )) {
					mod = query.replaceAll("es$", "");
			        	System.out.println("OES: " + mod);
					String modified_query = get_mod_query(first_part, last_part, query, mod);
					return(modified_query);
				}
		
				pattern = "[aeiou][aeiou]s$";
				r = Pattern.compile(pattern);
				m = r.matcher(query);
				if (m.find( )) {
					mod = query.replaceAll("s$", "");
			        	System.out.println("OOS: " + mod);
					String modified_query = get_mod_query(first_part, last_part, query, mod);
					return(modified_query);
				}
		
				pattern = "[^aeiou]s$";
				r = Pattern.compile(pattern);
				m = r.matcher(query);
				if (m.find( )) {
					mod = query.replaceAll("s$", "");
			        	System.out.println("S: " + mod);
					String modified_query = get_mod_query(first_part, last_part, query, mod);
					return(modified_query);
				}
			}
		}

		mod = query.replaceAll("s$", "");
        	System.out.println("DEFAULT: " + mod);
		String modified_query = get_mod_query(first_part, last_part, query, mod);
		return(modified_query);
	}

	public String get_mod_query(String first_part, String last_part, String query, String mod) {
		if(mod == null) {
			if(first_part == null) {
				System.out.println("FAULT: get_mod_query: no mod and no first_part value");
				return(null);
			}
			// String anchor_part = first_part.replaceAll("\\+", "");
			// anchor_part = anchor_part.replaceAll(" ", "+");
			//String single = "field_1:(" + first_part + ") anchor:(" + first_part + ")^5 &pf=field_1^5&ps=20";
			//first_part = first_part.replaceAll("\\+", "\\\\+");
			String single = "field_1:(" + first_part + ") anchor:(" + first_part + ")^5";
			//String single = "field_1:(+(" + anchor_part + ")) anchor:(+(" + anchor_part + "))^5&mm=3";
			//String single = first_part + "qf=field_1 anchor^20&mm=2";
			return(single);
		}
		if(first_part == null) {
			if(query == null) {
				System.out.println("FAULT: get_mod_query: no query value");
				return(null);
			}
			String single = "field_1:" + query + " anchor:" + query + "^5";
			return(single);
		}
		if(last_part == null) {
			System.out.println("FAULT: get_mod_query: no last_part value");
			return(null);
		}
		// String anchor_part = first_part.replaceAll("\\+", "") + " " + last_part.replaceAll("\\+", "");
		String qs = "((" +  first_part + ") AND (" + last_part + " OR " + mod + "))";
		//String as = "(" + anchor_part + ")";
		String mult = "field_1:" + qs + "~30 anchor:" + qs + "^5";
		System.out.println("MULT: " + mult);
		return(mult);
	}
	


		


	public synchronized  long logSession(String id) throws Exception {
		jedis.select(2);
		long k = jedis.incr(id);
		jedis.expire(id,  3600);
		return k;
	}


	public void sendMail(InputStream in) throws Exception {
		ObjectMapper mapper = new ObjectMapper();

		 JsonNode rootNode = mapper.readTree(in);
		 String name = rootNode.get("from").asText();
		 String from = rootNode.get("email").asText();
		 String subject = rootNode.get("subject").asText();
		 String body = rootNode.get("body").asText();

		// save the email as a file for backup
                 try {
                 	String allFields = "\nNAME: " + name + "\n" + "FROM: " + from + "\n" + "SUBJECT: " + subject + "\n" + "BODY: " + body + "\n\n";
                	File file = new File("/home/gimme/email.log");
                        if(!file.exists()) {
				file.createNewFile();
			}
			FileWriter fw = new FileWriter(file,true);
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write(allFields);
			bw.close();
		 } catch (IOException ioe) {
			System.out.println("Append email file exception occurred:");
			ioe.printStackTrace();
                 }


			final String username = "glen@solr1.com";
			final String password = "";

			Properties props = new Properties();
			props.put("mail.smtp.auth", "false");
			props.put("mail.smtp.host", "localhost");
			props.put("mail.smtp.port", "25");

			Session session = Session.getInstance(props,
			  new javax.mail.Authenticator() {
				protected PasswordAuthentication getPasswordAuthentication() {
					return new PasswordAuthentication(username, password);
				}
			  });

				Message message = new MimeMessage(session);
				message.setFrom(new InternetAddress(from));
				message.setRecipients(Message.RecipientType.TO,
					InternetAddress.parse("support@gimmeusa.com"));
				message.setSubject(subject);
				message.setText(body);

				Transport.send(message);

				System.out.println("EM: email sent");
	}

	public void sendMail(String from, String subject, String body) throws Exception {

		final String username = "glen@solr1.com";
		final String password = "";

		Properties props = new Properties();
		props.put("mail.smtp.auth", "false");
		props.put("mail.smtp.host", "localhost");
		props.put("mail.smtp.port", "25");

		Session session = Session.getInstance(props,
		  new javax.mail.Authenticator() {
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(username, password);
			}
		  });

			Message message = new MimeMessage(session);
			message.setFrom(new InternetAddress(from));
			message.setRecipients(Message.RecipientType.TO,
				InternetAddress.parse("support@gimmeusa.com"));
			message.setSubject(subject);
			message.setText(body);

			Transport.send(message);
			System.out.println("Done");
	}
	

	public String handleCapture(InputStream in) throws Exception {
		 ObjectMapper mapper = new ObjectMapper();
		 Gson gson = new Gson();
		 JsonNode rootNode = mapper.readTree(in);
		 String id = rootNode.get("id").asText();
		 String answer = rootNode.get("answer").asText();
		 Map r = new HashMap();
		 try {
			 boolean ok = Capture.isValid(id,answer);
			 r.put("status", ok);
		 } catch (Exception error) {
			 r.put("error", true);
		 }
		 return gson.toJson(r);
	}
	

	public String emitCapture(HttpSession session, int count, int tries, String jsName, String checker) throws Exception {
		return Capture.generate(session.getId(), count, tries, jsName, checker);
	}

	public String getCache(String key) {
		return(null);
		//jedis.select(1);
		//return jedis.get(key);
	}

	public String getLatLong(String locale) {
		jedis.select(1);
		locale = locale.replaceAll("\\+", " ");
		String latlong = jedis.hget("locale:latlong", locale);
	        System.out.println("LAT_LONG: " + locale + ": " + latlong);
		return latlong;
	}

	public String getNumBusinesses(String locale) {
		String numBusinesses = "0";
		if(locale != null) {
		   jedis.select(1);
		   locale = locale.replaceAll("\\+", " ");
		   String stuff = jedis.hget("locale:business", locale);
		   if(stuff != null) {
			numBusinesses = stuff;
		   }
		}
	        System.out.println("NUM_BUSINESSES: " + locale + ": " + numBusinesses);
		return numBusinesses;
	}

	public String getRadius(String num_businesses) {
		String radius = "10";
		int nb = Integer.parseInt(num_businesses);
		if(nb <= 50) {
         		radius = "50";
      		}
      		else if(nb > 50 && nb <= 200) {
         		radius = "40";
      		}
      		else if(nb > 200 && nb <= 500) {
         		radius = "25";
      		}
      		else if(nb > 500 && nb <= 1000) {
         		radius = "15";
      		}
		return(radius);
	}

	public void putCache(String key, String page) {
                return;
		//jedis.select(1);
		//jedis.set(key,page);
		//jedis.expire(key, 3600);
	}
}

